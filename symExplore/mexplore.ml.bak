open Common
open Zzdatatype.Datatype
open Language
open SFA
open Path

type path = MPath.path

let terminate_filter (dfa : dfa list) (p : path) =
  let end_points = MPath.end_point p in
  List.combine dfa end_points
  |> List.for_all (fun (dfa, en) -> StateSet.mem en dfa.finals)

let last_non_request_filter (ctx : sym_explore_ctx) (p : path) =
  match p with
  | PathEmpty _ -> true
  | PathCons { ch; _ } -> (
      match StrMap.find "die" ctx.event_kindctx ch.op with
      | Req -> false
      | Resp | Hidden -> true)

let request_length_filter (ctx : sym_explore_ctx) =
  MPath.to_ch_op_list
  #> (List.filter
        (StrMap.find "die" ctx.event_kindctx) #> ( function
        | Req -> true
        | _ -> false ))
  #> List.length
  #> (fun n -> n <= ctx.request_bound)

let path_length_filter n p = MPath.length p <= n

(* NOTE:
   dfa should be complete;
   although we have filter function; we still set a maximal bound to avoid finite loop
*)

let _default_path_lengt_bound = 200

(* let mbfs_with_filter (dfa : dfa list) (filter : MOpPath.path -> bool) *)
(*     (res_filter : MOpPath.path -> bool) = *)
(*   let open MOpPath in *)
(*   let rec bfs (fuel : int) (res : path list) (paths : path list) = *)
(*     (\* let () = Printf.printf "paths:\n%s\n" @@ Path.layout_paths_op paths in *\) *)
(*     let paths = List.filter (filter &&& fun p -> length p <= fuel) paths in *)
(*     match paths with *)
(*     | [] -> res *)
(*     | _ -> *)
(*         let res = res @ List.filter res_filter paths in *)
(*         if fuel <= 0 then res *)
(*         else *)
(*           let en = MOpPath.end_point cur in *)
(*           let nexts = *)
(*             List.map (fun (dfa, en) -> dfa.next #-> en) @@ List.combine dfa en *)
(*           in *)
(*           let tab = Hashtbl.create in *)
(*           let rec aux res nexts = *)
(*             match (res, nexts) with *)
(*             | None, [] -> _failatwith __FILE__ __LINE__ "die" *)
(*             | None, next :: nexts -> *)
(*                 CharMap.fold *)
(*                   (fun se dest p res -> *)
(*                     match p with *)
(*                     | Some p -> Some p *)
(*                     | None -> *)
(*                         let op, _, _ = *)
(*                           _get_sevent_fields __FILE__ __LINE__ se *)
(*                         in *)
(*                         res (aux (Some (op, [ dest ])) nexts)) *)
(*                   next None *)
(*             | Some (op, dests), [] -> *)
(*                   [MPath.(append cur (op, dests))] *)
(*             | Some (op, vs, phis, dests), next :: nexts -> *)
(*                 CharMap.fold *)
(*                   (fun se dest p -> *)
(*                     match p with *)
(*                     | Some p -> Some p *)
(*                     | None -> *)
(*                         let op', _, phi = *)
(*                           _get_sevent_fields __FILE__ __LINE__ se *)
(*                         in *)
(*                         if String.equal op' op then *)
(*                           aux *)
(*                             (Some (op, vs, phis @ [ phi ], dests @ [ dest ])) *)
(*                             nexts *)
(*                         else None) *)
(*                   next None *)
(*           in *)
(*           aux None nexts bfs (fuel - 1) res paths *)
(*   in *)
(*   bfs _default_path_lengt_bound [] [ PathEmpty dfa.start ] *)

let mdfs_with_filter ctx (dfa : (Nt.t prop * dfa) list) (filter : path -> bool)
    (res_filter : path -> bool) =
  let world_props = List.map fst dfa in
  let dfa = List.map snd dfa in
  let rec dfs (fuel : int) (cur : path) =
    (* let () = *)
    (*   Printf.printf "Exploring:\n%s\n" (Path.layout_paths @@ to_paths cur) *)
    (* in *)
    if fuel <= 0 || not (filter cur) then None
    else if res_filter cur then Some cur
    else
      let en = MPath.end_point cur in
      let nexts =
        List.map (fun (dfa, en) -> dfa.next #-> en) @@ List.combine dfa en
      in
      let rec aux res nexts =
        match (res, nexts) with
        | None, [] -> _failatwith __FILE__ __LINE__ "die"
        | None, next :: nexts ->
            CharMap.fold
              (fun se dest p ->
                match p with
                | Some p -> Some p
                | None ->
                    let op, vs, phi = _get_sevent_fields __FILE__ __LINE__ se in
                    aux (Some (op, vs, [ phi ], [ dest ])) nexts)
              next None
        | Some (op, vs, phis, dests), [] ->
            let ch = MultiEvent.{ op; vs; phis } in
            if MultiEvent.check ctx.sat_solver ctx.world world_props ch then
              let p = MPath.(append cur ({ op; vs; phis }, dests)) in
              dfs (fuel - 1) p
            else None
        | Some (op, vs, phis, dests), next :: nexts ->
            CharMap.fold
              (fun se dest p ->
                match p with
                | Some p -> Some p
                | None ->
                    let op', _, phi = _get_sevent_fields __FILE__ __LINE__ se in
                    if String.equal op' op then
                      aux
                        (Some (op, vs, phis @ [ phi ], dests @ [ dest ]))
                        nexts
                    else None)
              next None
      in
      aux None nexts
  in
  let start = MPath.(PathEmpty (List.map (fun dfa -> dfa.start) dfa)) in
  dfs _default_path_lengt_bound start

let mexplore_counterexample_paths (ctx : sym_explore_ctx) dfa =
  let* res =
    mdfs_with_filter ctx dfa
      (request_length_filter ctx &&& path_length_filter ctx.step_bound)
      (terminate_filter (List.map snd dfa))
  in
  let paths = to_paths res in
  let worlds = List.map fst dfa in
  Some (List.combine worlds paths)
